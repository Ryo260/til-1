## チーム開発
* リリース資材の確認  
→ 「自分の修正に係るソース」が全量揃っているかを確認する。  
→自分のソースに「他人が直したソースに依存する箇所」がある場合、  
その修正もリリース対象になっているかを確認する。  

## 学習について
* 覚えようとするのではなく、実際にやってみる
* 疑いをもって深堀する
* 失敗の原因を外部に求めない

## バグ調査
* 以下の点を明確にする
  * 内容
  * 検出の経緯
  * 影響
  * 原因
  * あるべき姿
  * 対応に必要な作業
  * 対応に必要な工数
## 進め方
* 常に「他人への引き継ぎ」を意識した資料を用意しておく
## テスト実施
* 再テストの考え方：  
 * 全ステップ再実施
 * 前段のステップから再実施  
 ⇒根拠が必要
## 情報の連携
* なるべく「データ」⇒「情報」へ精度を上げてから伝えるよう心掛ける

* シングルページアプリケーション  
クライアントの処理性能に依存。その分通信量やサーバー性能は重視しなくても良くなる。
* 自宅環境へのリモート接続におけるセキュリティ  
⇒sshを利用した公開鍵認証でよいのでは
* 関数の切り分けTips
 * 関数単位で「責任」を考える。  
 責任 = 関数通過前後の遂行されるべき動作  
 ⇒ 複数の「責任」が与えられている場合は、切り分ける。  
 ※ 責任はその関数の最上位レイヤー部分だけを見る。  
 複数のロジックを実行する関数(Service)の場合、  
 「関数を実行する」という責任は持つが、「正しい関数の出力結果を出す」責任は持たない。

 ## 用語
* クリーンアーキテクチャ
  * スマホ開発で主流。Web開発はまだMVC
* DDD(ドメイン駆動開発)
  * 業務フローをベースとした開発？
* ファーストクラスコレクション
  * 配列もラップ 

##  その他
* オブジェクト指向エクササイズ